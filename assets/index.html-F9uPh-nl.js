import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as n,o as a,c as o,a as d,b as t,e as i,d as s}from"./app-1ZTmwhuN.js";const h="/assets/dcd25a6082e1989975c280213f3e1052-tli5j0BX.png",l={},c=d("h1",{id:"vi-vim-编辑器",tabindex:"-1"},[d("a",{class:"header-anchor",href:"#vi-vim-编辑器","aria-hidden":"true"},"#"),t(" vi / vim 编辑器")],-1),g={href:"https://www.runoob.com/linux/linux-vim.html",target:"_blank",rel:"noopener noreferrer"},p=s('<h2 id="三种模式" tabindex="-1"><a class="header-anchor" href="#三种模式" aria-hidden="true">#</a> 三种模式</h2><figure><img src="'+h+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>基本上 vi/vim 共分为三种模式，分别是 <strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）<strong>和</strong>底线命令模式（Last line mode）</strong>。这三种模式的作用分别是：</p><h3 id="命令模式" tabindex="-1"><a class="header-anchor" href="#命令模式" aria-hidden="true">#</a> 命令模式</h3><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符。比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动 Vim，进入了命令模式，按下 i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h3 id="输入模式" tabindex="-1"><a class="header-anchor" href="#输入模式" aria-hidden="true">#</a> 输入模式</h3><p>在命令模式下按下 i 就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及 Shift 组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li><li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li><li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h3 id="底线命令模式" tabindex="-1"><a class="header-anchor" href="#底线命令模式" aria-hidden="true">#</a> 底线命令模式</h3><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按 ESC 键可随时退出底线命令模式。</p><h2 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h2><h3 id="命令模式-1" tabindex="-1"><a class="header-anchor" href="#命令模式-1" aria-hidden="true">#</a> 命令模式</h3><h4 id="移动光标" tabindex="-1"><a class="header-anchor" href="#移动光标" aria-hidden="true">#</a> 移动光标</h4><p>上下左右和 <code>h</code>,<code>j</code>,<code>k</code>,<code>l</code>。可以用 <code>数字+j</code> / <code>数字 +↓</code> 移动多行</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down] 按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td>[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td>[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td>n<code>space</code></td><td>那个 n 表示『数字』，例如 20。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<code>space</code> 则光标会向后面移动 20 个字符距离。</td></tr><tr><td>0 或功能键 [Home]</td><td>这是数字『0』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td>$ 或功能键 [End]</td><td>移动到这一行的最后面字符处 (常用)</td></tr><tr><td>H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td>M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td>L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td><strong>G / shift+g</strong></td><td><strong>移动到这个文件的最后一行（常用）</strong></td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行 (可配合 : set nu)</td></tr><tr><td>gg</td><td>移动到这个档案的第一行，相当于 1G 啊！(常用)</td></tr><tr><td>n<code>Enter</code></td><td>n 为数字。光标向下移动 n 行 (常用)</td></tr></tbody></table><h4 id="删除、复制与贴上" tabindex="-1"><a class="header-anchor" href="#删除、复制与贴上" aria-hidden="true">#</a> 删除、复制与贴上</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)，X 为向前删除一个字符 (相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td>nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符，『10x』。</td></tr><tr><td>dd</td><td>删除游标所在的那一整行 (常用)</td></tr><tr><td>ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td>d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td>dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td>d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td>d0</td><td>那个是数字的 0，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td>yy</td><td>复制游标所在的那一行 (常用)</td></tr><tr><td>nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行 (常用)</td></tr><tr><td>y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td>yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td>y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td>y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td>p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后，那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)</td></tr><tr><td>J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td>c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td>u</td><td>撤销</td></tr><tr><td>[Ctrl]+r</td><td>重做</td></tr><tr><td></td><td>这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td></tr><tr><td>.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！(常用)</td></tr></tbody></table><h3 id="底线命令" tabindex="-1"><a class="header-anchor" href="#底线命令" aria-hidden="true">#</a> 底线命令</h3><h4 id="保存与退出" tabindex="-1"><a class="header-anchor" href="#保存与退出" aria-hidden="true">#</a> 保存与退出</h4><h4 id="搜索替换" tabindex="-1"><a class="header-anchor" href="#搜索替换" aria-hidden="true">#</a> 搜索替换</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用)</td></tr><tr><td>?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td>n</td><td>重复前一个搜索动作。如 <code>/word</code> 后按 <code>n</code> 则为查找下一个</td></tr><tr><td>N</td><td>与 n 相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird。</td></tr><tr><td></td><td></td></tr><tr><td>: n1,n2s/word1/word2/g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：『:100,200s/vbird/VBIRD/g』。(常用)</td></tr><tr><td><strong>:1,$s/word1/word2/g</strong> 或 <strong>:%s/word1/word2/g</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2！(常用)</td></tr><tr><td><strong>:1,$s/word1/word2/gc</strong> 或 <strong>:%s/word1/word2/gc</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr></tbody></table><h3 id="第二部分-一般模式切换到编辑模式的可用的按钮说明" tabindex="-1"><a class="header-anchor" href="#第二部分-一般模式切换到编辑模式的可用的按钮说明" aria-hidden="true">#</a> 第二部分：一般模式切换到编辑模式的可用的按钮说明</h3><table><thead><tr><th>进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td>i, I</td><td>进入输入模式 (Insert mode)：i 为『从目前光标所在处输入』，I 为『在目前所在行的第一个非空格符处开始输入』。(常用)</td></tr><tr><td>a, A</td><td>进入输入模式 (Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』，A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td>o, O</td><td>进入输入模式 (Insert mode)：这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行；O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td>r, R</td><td>进入取代模式 (Replace mode)：r 只会取代光标所在的那一个字符一次；R 会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到一般模式中 (常用)</td></tr><tr><td>上面这些按键中，在 vi 画面的左下角处会出现『--INSERT--』或『--REPLACE--』的字样。由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时，一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr></tbody></table><h3 id="第三部分-一般模式切换到指令行模式的可用的按钮说明" tabindex="-1"><a class="header-anchor" href="#第三部分-一般模式切换到指令行模式的可用的按钮说明" aria-hidden="true">#</a> 第三部分：一般模式切换到指令行模式的可用的按钮说明</h3><table><thead><tr><th>指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td>: w</td><td>将编辑的数据写入硬盘档案中 (常用)</td></tr><tr><td>: w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入，还是跟你对该档案的档案权限有关啊！</td></tr><tr><td>: q</td><td>离开 vi (常用)</td></tr><tr><td>: q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td>注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td>: wq</td><td>储存后离开，若为 : wq! 则为强制储存后离开 (常用)</td></tr><tr><td>ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于 (保存并退出)</td></tr><tr><td>ZQ</td><td>不保存，强制退出。效果等同于 <strong>: q!</strong>。</td></tr><tr><td>: w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td>: r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将『filename』这个档案内容加到游标所在行后面</td></tr><tr><td>: n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td>:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td>vim 环境的变更</td><td></td></tr><tr><td>: set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td>: set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table>',35);function m(b,u){const r=n("ExternalLinkIcon");return a(),o("div",null,[c,d("p",null,[t("vi 编辑器是 Linux 系统下标准的编辑器，这玩意有些简单，虽然命令很多，不过练练就好，懒得写了，参考 "),d("a",g,[t("Linux vi/vim | 菜鸟教程"),i(r)]),t(" 吧。")]),p])}const x=e(l,[["render",m],["__file","index.html.vue"]]);export{x as default};
