import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o,c,a as n,b as s,e as i,d as a}from"./app-1ZTmwhuN.js";const l={},u=a('<h1 id="poscar-与其他格式互转" tabindex="-1"><a class="header-anchor" href="#poscar-与其他格式互转" aria-hidden="true">#</a> POSCAR 与其他格式互转</h1><h2 id="将-poscar-转换为-xsd-格式文件" tabindex="-1"><a class="header-anchor" href="#将-poscar-转换为-xsd-格式文件" aria-hidden="true">#</a> 将 POSCAR 转换为 xsd 格式文件</h2><p>该方法依赖 ASE。</p><h3 id="ase-的-ase-io-read-与-ase-io-write" tabindex="-1"><a class="header-anchor" href="#ase-的-ase-io-read-与-ase-io-write" aria-hidden="true">#</a> ASE 的 <code>ase.io.read()</code> 与 <code>ase.io.write()</code></h3>',4),r=n("code",null,"ase.io.read()",-1),d=n("code",null,"ase.io.write()",-1),k={href:"https://wiki.fysik.dtu.dk/ase/ase/io/io.html",target:"_blank",rel:"noopener noreferrer"},m=a(`<h3 id="ase-io-read" tabindex="-1"><a class="header-anchor" href="#ase-io-read" aria-hidden="true">#</a> <code>ase.io.read()</code></h3><p>【功能为：<strong>Read Atoms object(s) from file</strong>】</p><p>官方关于 <code>ase.io.read()</code> 的使用为：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>ase<span class="token punctuation">.</span>io<span class="token punctuation">.</span>read<span class="token punctuation">(</span>filename<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> pathlib<span class="token punctuation">.</span>PurePath<span class="token punctuation">,</span> IO<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Any<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> parallel<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> do_not_split_by_at_sign<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一般我们只需要提供 <strong>文件名称及其类型</strong> 就行，比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>ase<span class="token punctuation">.</span>io<span class="token punctuation">.</span>read<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span>files_format<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如，我需要读取文件‘POSCAR’,文件类型为‘vasp’,则函数调用时应为：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>ase<span class="token punctuation">.</span>io<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">&#39;POSCAR, format=&#39;</span>vasp&#39;<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ase-io-write" tabindex="-1"><a class="header-anchor" href="#ase-io-write" aria-hidden="true">#</a> <code>ase.io.write()</code></h3><p>【功能为：<strong>Write Atoms object(s) to file</strong>】</p><p>官方关于 ase.io.write() 的使用为：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>ase<span class="token punctuation">.</span>io<span class="token punctuation">.</span>write<span class="token punctuation">(</span>filename<span class="token punctuation">:</span> Union<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> pathlib<span class="token punctuation">.</span>PurePath<span class="token punctuation">,</span> IO<span class="token punctuation">]</span><span class="token punctuation">,</span> images<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>ase<span class="token punctuation">.</span>atoms<span class="token punctuation">.</span>Atoms<span class="token punctuation">,</span> Sequence<span class="token punctuation">[</span>ase<span class="token punctuation">.</span>atoms<span class="token punctuation">.</span>Atoms<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> parallel<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> append<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其使用与 <code>ase.io.read()</code> 的相类似，不同地是 <strong>需要指定需要写入文件的 atoms objects</strong>，其实就是原子信息，输入的类型可以是 Atoms object or list of Atoms objects。由 ase.io.read() 函数可以知道，一份有关原子信息的文件其实就是 atoms object。所以：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>ase<span class="token punctuation">.</span>io<span class="token punctuation">.</span>write<span class="token punctuation">(</span>‘test<span class="token punctuation">.</span>xsd’<span class="token punctuation">,</span> atoms <span class="token builtin">object</span><span class="token punctuation">,</span><span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;xsd&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里 test. xsd 是希望得到的文件格式的文件名 + 后缀名，POSCAR 是指读取的文件，<code>format=&#39;xsd&#39;</code> 是指信息写入文件的文件类型。</p><p>所以 <strong>ase 转换文件格式的原理</strong> 是：</p><ul><li>先读取文件中的所有信息，转为 atoms object</li><li>再将 atoms object 写入其他格式的文件中</li></ul><h3 id="单份-poscar-文件转换为-xsd-文件" tabindex="-1"><a class="header-anchor" href="#单份-poscar-文件转换为-xsd-文件" aria-hidden="true">#</a> 单份 poscar 文件转换为 xsd 文件</h3><p>比如，由 VASP 得到一份 POSCAR 文件，这里实现将其文件格式转换为 xsd 格式的文件，文件名为 test。</p><p>代码思路就是 (调用 ase.io 模块)：</p><ul><li>使用 read() 函数读取文件信息，暂存为 atoms object</li><li>接着使用 write() 函数将该 atoms object 写入文件</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> ase<span class="token punctuation">.</span>io <span class="token keyword">import</span> read<span class="token punctuation">,</span>write
poscar_file<span class="token operator">=</span>read<span class="token punctuation">(</span><span class="token string">&#39;POSCAR&#39;</span><span class="token punctuation">,</span><span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;vasp&#39;</span><span class="token punctuation">)</span>
xsd_file<span class="token operator">=</span>write<span class="token punctuation">(</span><span class="token string">&#39;test.xsd&#39;</span><span class="token punctuation">,</span>poscar_file<span class="token punctuation">,</span><span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;xsd&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：文件名需要带有文件格式后缀</p><h3 id="将多份-poscar-文件转换为-xsd-文件" tabindex="-1"><a class="header-anchor" href="#将多份-poscar-文件转换为-xsd-文件" aria-hidden="true">#</a> 将多份 poscar 文件转换为 xsd 文件</h3><p>结合 for 循环遍历文件输入\\输出 atoms object，即可实现批量操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">poscar_to_xsd</span><span class="token punctuation">(</span>file_PATH<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token comment">#file_PATH为储存所有待转换格式的文件的文件夹路径</span>
    tqdm<span class="token operator">=</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>file_PATH<span class="token punctuation">)</span><span class="token comment">#文件夹中的文件列表</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>tqdm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#逐次遍历文件夹下的文件</span>
        inputfile <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>file_PATH<span class="token punctuation">,</span>tqdm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#对应文件夹下的某份文件</span>
        outputfile<span class="token operator">=</span>inputfile<span class="token operator">+</span><span class="token string">&#39;.xsd&#39;</span><span class="token comment">#定义转换格式后的文件名字</span>
        poscar_file<span class="token operator">=</span>read<span class="token punctuation">(</span>inputfile<span class="token punctuation">,</span><span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;vasp&#39;</span><span class="token punctuation">)</span><span class="token comment">#读入文件</span>
        xsd_file<span class="token operator">=</span>write<span class="token punctuation">(</span>outputfile<span class="token punctuation">,</span>poscar_file<span class="token punctuation">,</span><span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;xsd&#39;</span><span class="token punctuation">)</span><span class="token comment">#将读入的文件写入其他格式的文件</span>
<span class="token comment">#调用该函数</span>
poscar_to_xsd<span class="token punctuation">(</span><span class="token string">&quot;C-N-2-defect-1652750340&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img-blog.csdnimg.cn/1180f6975d6b4f8394241214d5612232.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure>`,27);function b(h,v){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[r,s(" 与 "),d,s("，文档见 "),n("a",k,[s("File input and output — ASE documentation (dtu.dk)"),i(t)])]),m])}const _=p(l,[["render",b],["__file","poscar-convert.html.vue"]]);export{_ as default};
