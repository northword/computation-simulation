const t=JSON.parse('{"key":"v-279833aa","path":"/code/linux/install-app-non-root/","title":"Linux 下无 Root 权限编译软件","lang":"zh-CN","frontmatter":{"title":"Linux 下无 Root 权限编译软件","date":"2020-11-21T12:12:10.000Z","updated":"2022-09-16T18:37:40.000Z","permalink":"/code/linux/install-app-non-root/","category":["Install","linux"],"redirectFrom":"/dft-learning/pages/4738ea/","description":"Linux 下无 Root 权限编译软件 参考：linux 非 root 用户安装软件入门 | tlanyan.me . 下为上文的备份。 下面是 Linux 下非 root 用户安装软件的一般流程： 获取源代码；常用 wget/curl 下载，也可以用类似 apt-get source 的方式获取仓库中软件源代码； 解压源代码安装包；例如对于 gzip 格式的 tar 包：tar -zxvf xxx.tar.gz； 切换到解压后的目录，运行 ./configure;./configure --help 可以列出配置项，非 root 用户最重要的配置项是安装目录 prefix，例如 ./configure --prefix=/path/to/bin。在无法自动找到依赖库位置的情况下，用 --with-xx-dir=xxx 的形式配置依赖库位置； 编译源代码并复制可执行文件到指定的安装目录：make &amp;&amp; make install。这两条命令可以分开执行，make 时指定 -j 参数并行编译，能显著减少编译耗时（单进程编译 GCC 需要几个小时，开启并行编译后可缩短到十几分钟）； 使用 export PATH=/path/to/bin:$PATH 更新 PATH 变量。命令行窗口运行此命令只对本次会话中有效，可将其写到.bashrc 或者.bash_profile 中； 如果安装的是动态链接库，则需要更新动态链接库路径：export LD_LIBRARY_PATH=/path/to/library:$LD_LIBRARY_PATH。最好将此命令写在.bashrc 文件中，用户下次打开会话时自动执行。","head":[["script",{"type":"text/javascript"},"var _hmt = _hmt || []"],["script",{"src":"https://hm.baidu.com/hm.js?5574297d56b065f5137cf3654e3de360"}],["script",{"src":"https://hm.baidu.com/hm.js?92a8f6d9fbb75efa90964afcd42be758"}],["meta",{"property":"og:url","content":"https://northword.cn/code/linux/install-app-non-root/"}],["meta",{"property":"og:site_name","content":"北辞"}],["meta",{"property":"og:title","content":"Linux 下无 Root 权限编译软件"}],["meta",{"property":"og:description","content":"Linux 下无 Root 权限编译软件 参考：linux 非 root 用户安装软件入门 | tlanyan.me . 下为上文的备份。 下面是 Linux 下非 root 用户安装软件的一般流程： 获取源代码；常用 wget/curl 下载，也可以用类似 apt-get source 的方式获取仓库中软件源代码； 解压源代码安装包；例如对于 gzip 格式的 tar 包：tar -zxvf xxx.tar.gz； 切换到解压后的目录，运行 ./configure;./configure --help 可以列出配置项，非 root 用户最重要的配置项是安装目录 prefix，例如 ./configure --prefix=/path/to/bin。在无法自动找到依赖库位置的情况下，用 --with-xx-dir=xxx 的形式配置依赖库位置； 编译源代码并复制可执行文件到指定的安装目录：make &amp;&amp; make install。这两条命令可以分开执行，make 时指定 -j 参数并行编译，能显著减少编译耗时（单进程编译 GCC 需要几个小时，开启并行编译后可缩短到十几分钟）； 使用 export PATH=/path/to/bin:$PATH 更新 PATH 变量。命令行窗口运行此命令只对本次会话中有效，可将其写到.bashrc 或者.bash_profile 中； 如果安装的是动态链接库，则需要更新动态链接库路径：export LD_LIBRARY_PATH=/path/to/library:$LD_LIBRARY_PATH。最好将此命令写在.bashrc 文件中，用户下次打开会话时自动执行。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-09-16T11:15:35.000Z"}],["meta",{"property":"article:author","content":"Northword"}],["meta",{"property":"article:published_time","content":"2020-11-21T12:12:10.000Z"}],["meta",{"property":"article:modified_time","content":"2022-09-16T11:15:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux 下无 Root 权限编译软件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-11-21T12:12:10.000Z\\",\\"dateModified\\":\\"2022-09-16T11:15:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Northword\\",\\"url\\":\\"https://northword.cn\\"}]}"]]},"headers":[],"git":{"createdTime":1663326935000,"updatedTime":1663326935000,"contributors":[{"name":"Northword","email":"northword@outlook.com","commits":1}]},"readingTime":{"minutes":6,"words":1799},"filePathRelative":"code/linux/31.linux-install-app-for-nonRoot.md","localizedDate":"2020年11月21日","excerpt":"<h1> Linux 下无 Root 权限编译软件</h1>\\n<p><strong>参考：<a href=\\"https://tlanyan.me/work-with-linux-without-root-permission/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">linux 非 root 用户安装软件入门 | tlanyan.me</a> .</strong></p>\\n<p>下为上文的备份。</p>\\n<hr>\\n<p>下面是 Linux 下非 root 用户安装软件的一般流程：</p>\\n<ol>\\n<li>获取源代码；常用 <code>wget/curl</code> 下载，也可以用类似 <code>apt-get source</code> 的方式获取仓库中软件源代码；</li>\\n<li>解压源代码安装包；例如对于 gzip 格式的 tar 包：<code>tar -zxvf xxx.tar.gz</code>；</li>\\n<li>切换到解压后的目录，运行 <code>./configure</code>;<code>./configure --help</code> 可以列出配置项，<strong>非 root 用户最重要的配置项是安装目录 prefix</strong>，例如 <code>./configure --prefix=/path/to/bin</code>。在无法自动找到依赖库位置的情况下，用 <code>--with-xx-dir=xxx</code> 的形式配置依赖库位置；</li>\\n<li>编译源代码并复制可执行文件到指定的安装目录：<code>make &amp;&amp; make install</code>。这两条命令可以分开执行，make 时指定 -j 参数并行编译，能显著减少编译耗时（单进程编译 GCC 需要几个小时，开启并行编译后可缩短到十几分钟）；</li>\\n<li>使用 <code>export PATH=/path/to/bin:$PATH</code> 更新 PATH 变量。命令行窗口运行此命令只对本次会话中有效，可将其写到.bashrc 或者.bash_profile 中；</li>\\n<li>如果安装的是动态链接库，则需要更新动态链接库路径：<code>export LD_LIBRARY_PATH=/path/to/library:$LD_LIBRARY_PATH</code>。最好将此命令写在.bashrc 文件中，用户下次打开会话时自动执行。</li>\\n</ol>","autoDesc":true}');export{t as data};
